import mongoose, { Document, Schema } from 'mongoose';
import { MediaMetadata } from './media.interface';

export interface IMediaFile extends Document {
  key: string;
  processedKey?: string;
  thumbnailKey?: string;
  userId: string;
  beatId?: string;
  fileType: 'audio' | 'image' | 'profile' | 'artwork';
  title?: string;
  description?: string;
  tags?: string[];
  isPublic: boolean;
  metadata: MediaMetadata;
  status: 'uploading' | 'processing' | 'processed' | 'failed';
  uploadedAt: Date;
  processedAt?: Date;
  createdAt: Date;
  updatedAt: Date;
}

const mediaFileSchema = new Schema<IMediaFile>({
  key: {
    type: String,
    required: true,
    unique: true,
  },
  processedKey: {
    type: String,
    required: false,
  },
  thumbnailKey: {
    type: String,
    required: false,
  },
  userId: {
    type: String,
    required: true,
    ref: 'User',
  },
  beatId: {
    type: String,
    required: false,
    ref: 'Beat',
  },
  fileType: {
    type: String,
    required: true,
    enum: ['audio', 'image', 'profile', 'artwork'],
  },
  title: {
    type: String,
    maxlength: 100,
  },
  description: {
    type: String,
    maxlength: 500,
  },
  tags: [{
    type: String,
    maxlength: 30,
  }],
  isPublic: {
    type: Boolean,
    default: false,
  },
  metadata: {
    duration: Number,
    bitrate: Number,
    sampleRate: Number,
    width: Number,
    height: Number,
    format: {
      type: String,
      required: true,
    },
    size: {
      type: Number,
      required: true,
    },
  },
  status: {
    type: String,
    required: true,
    enum: ['uploading', 'processing', 'processed', 'failed'],
    default: 'uploading',
  },
  uploadedAt: {
    type: Date,
    default: Date.now,
  },
  processedAt: {
    type: Date,
  },
}, {
  timestamps: true,
});

// Indexes for better query performance
mediaFileSchema.index({ userId: 1, fileType: 1 });
mediaFileSchema.index({ beatId: 1 });
mediaFileSchema.index({ status: 1 });
mediaFileSchema.index({ uploadedAt: -1 });
mediaFileSchema.index({ isPublic: 1, fileType: 1 });

// Virtual for public URL
mediaFileSchema.virtual('publicUrl').get(function() {
  if (this.isPublic) {
    return `${process.env.CLOUDFLARE_R2_PUBLIC_URL}/${this.key}`;
  }
  return null;
});

// Virtual for download URL (would need to be generated on demand)
mediaFileSchema.virtual('downloadUrl').get(function() {
  // This would be generated by the service when needed
  return null;
});

// Ensure virtual fields are serialized
mediaFileSchema.set('toJSON', { virtuals: true });
mediaFileSchema.set('toObject', { virtuals: true });

export const MediaFile = mongoose.model<IMediaFile>('MediaFile', mediaFileSchema);
